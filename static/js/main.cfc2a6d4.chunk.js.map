{"version":3,"sources":["serviceWorker.ts","view/Homepage/Homepage.tsx","components/Header/Header.tsx","services/app.service.tsx","view/Dashboard/Dashboard.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Homepage","routeToDashboard","_this","props","history","push","react","className","Button_default","a","onClick","this","color","React","withRouter","Header","Navbar_default","NavbarBrand_default","AppService","Object","classCallCheck","createClass","key","value","_fetchPosts","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","then","response","ok","Error","statusText","json","catch","error","abrupt","sent","stop","apply","arguments","Dashboard","_React$Component","possibleConstructorReturn","getPrototypeOf","inherits","components_Header_Header","fetchPosts","data","console","log","ReactDOM","render","react_default","createElement","BrowserRouter","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2HCbAC,oNAcJC,iBAAmB,WACjBC,EAAKC,MAAMC,QAAQC,KAAK,uFAZxB,OACIC,EAAA,qBAAKC,UAAU,yBACbD,EAAA,mDACAA,EAAA,yBACAA,EAAA,cAACE,EAAAC,EAAD,CAAQC,QAASC,KAAKV,iBAAkBW,MAAM,WAA9C,uBAPaC,cAkBRC,cAAWd,6CCXXe,EAPA,kBACXT,EAAA,cAACU,EAAAP,EAAD,CAAQF,UAAU,aACdD,EAAA,cAACW,EAAAR,EAAD,CAAaF,UAAU,mBACnBD,EAAA,oBAAIC,UAAU,aAAd,wDCRCW,EAAb,oBAAAA,IAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAO,GAAA,OAAAC,OAAAE,EAAA,EAAAF,CAAAD,EAAA,OAAAI,IAAA,aAAAC,MAAA,eAAAC,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,EAAAjB,EAAAkB,KAAA,SAAAC,IAAA,OAAAF,EAAAjB,EAAAoB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEiBC,MAAM,+BAClBC,KAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAMC,MAAMF,EAASG,YAEvB,OAAOH,IAERD,KAAK,SAAAC,GAAQ,OAAIA,EAASI,SAC1BC,MAAM,SAAAC,GACL,MAAMJ,MAAMI,EAAMH,cAXxB,cAAAR,EAAAY,OAAA,SAAAZ,EAAAa,MAAA,wBAAAb,EAAAc,SAAAhB,EAAAjB,SAAA,yBAAAa,EAAAqB,MAAAlC,KAAAmC,YAAA,MAAA5B,EAAA,GCIa6B,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA5B,OAAAC,EAAA,EAAAD,CAAAR,KAAAoC,GAAA5B,OAAA8B,EAAA,EAAA9B,CAAAR,KAAAQ,OAAA+B,EAAA,EAAA/B,CAAA4B,GAAAF,MAAAlC,KAAAmC,YAAA,OAAA3B,OAAAgC,EAAA,EAAAhC,CAAA4B,EAAAC,GAAA7B,OAAAE,EAAA,EAAAF,CAAA4B,EAAA,EAAAzB,IAAA,SAAAC,MAAA,WAEI,OACIjB,EAAA,yBACAA,EAAA,cAAC8C,EAAD,SAJR,CAAA9B,IAAA,oBAAAC,MAAA,WAUIL,EAAWmC,aACVnB,KAAK,SAAAoB,GAAI,OAAKC,QAAQC,IAAI,OAAQF,KAClCd,MAAM,SAACC,GAAD,OAAWc,QAAQC,IAAI,yBAA0Bf,SAZ5DM,EAAA,CAA+BlC,aCQ/B4C,IAASC,OACLC,EAAAlD,EAAAmD,cAACC,EAAA,EAAD,KACUF,EAAAlD,EAAAmD,cAAA,WACED,EAAAlD,EAAAmD,cAACE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjE,IACjC2D,EAAAlD,EAAAmD,cAACE,EAAA,EAAD,CAAOE,KAAK,aAAaC,UAAWlB,MAGhDmB,SAASC,eAAe,SLsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.cfc2a6d4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport Button from 'reactstrap/lib/Button';\nimport {withRouter} from 'react-router-dom';\nimport './Homepage.scss';\n\nclass Homepage extends React.Component<any, {}> {\n\n  render() {\n    return (\n        <div className='home-page text-center'>\n          <h2>Welcome to PR Dashboard</h2>\n          <br/>\n          <Button onClick={this.routeToDashboard} color='success'>\n            Get Started\n          </Button>\n        </div>\n    );\n  }\n\n  routeToDashboard = () => {\n    this.props.history.push('/dashboard');\n  }\n}\nexport default withRouter(Homepage);","import * as React from 'react';\nimport './Header.scss';\nimport Navbar from 'reactstrap/lib/Navbar';\nimport NavbarBrand from 'reactstrap/lib/NavbarBrand';\n\nconst Header = () => (\n    <Navbar className='pr-navbar'>\n        <NavbarBrand className='pr-navbar-brand'>\n            <h4 className='pr-header'> Pull Request Dashboard </h4>\n        </NavbarBrand>\n    </Navbar>\n);\nexport default Header;\n","export class AppService {\n  public static async fetchPosts() {\n    return await fetch('http://localhost:3001/posts')\n    .then((response) => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => response.json())\n    .catch(error => {\n      throw Error(error.statusText)\n    });\n  }\n}","import * as React from 'react';\nimport Header from '../../components/Header/Header';\nimport {AppService} from '../../services/app.service';\n\nexport class Dashboard extends React.Component {\n  render() {\n    return (\n        <div>\n        <Header />\n        </div>\n    );\n  }\n\n  componentDidMount() {\n    AppService.fetchPosts()\n    .then(data =>  console.log('data', data))\n    .catch((error) => console.log('Error in fetching data', error));\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport Homepage from './view/Homepage/Homepage';\nimport {Dashboard} from './view/Dashboard/Dashboard';\n\nReactDOM.render(\n    <Router>\n              <div>\n                <Route exact path=\"/\" component={Homepage} />\n                <Route path=\"/dashboard\" component={Dashboard} />\n              </div>\n            </Router>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}