{"version":3,"sources":["serviceWorker.ts","view/Homepage/Homepage.tsx","components/Header/Header.tsx","services/app.service.tsx","components/AddRepoButton/AddRepoButton.tsx","components/InputRepoModal/InputRepoModal.tsx","view/Dashboard/Dashboard.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Homepage","routeToDashboard","_this","props","history","push","react","className","Button_default","a","onClick","this","color","React","withRouter","Header","Navbar_default","NavbarBrand_default","AppService","Object","classCallCheck","createClass","key","value","_fetchPosts","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","then","response","ok","Error","statusText","json","catch","error","abrupt","sent","stop","apply","arguments","_fetchUsers","_callee2","user","_context2","concat","_x","_fetchUserRepos","_callee3","_context3","_x2","AddRepoButton","possibleConstructorReturn","getPrototypeOf","call","id","title","InputRepoModal","_React$Component","state","handleUserChange","event","setState","target","text","length","fetchUsers","data","options","items","forEach","x","option","login","userOptions","console","handleRepoChange","repo","handleBlur","fetchUserRepos","repos","name","repoOptions","repoList","inherits","Modal_default","isOpen","showModal","toggle","ModalHeader_default","style","ModalBody_default","InputGroup_default","InputGroupAddon_default","addonType","type","Input_default","placeholder","list","onChange","onBlur","required","disabled","ModalFooter_default","Dashboard","components_Header_Header","components_AddRepoButton_AddRepoButton","InputRepoModal_InputRepoModal_InputRepoModal","onHide","fetchPosts","log","ReactDOM","render","react_default","createElement","BrowserRouter","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed4bea9f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport Button from 'reactstrap/lib/Button';\nimport {withRouter} from 'react-router-dom';\nimport './Homepage.scss';\n\nclass Homepage extends React.Component<any, {}> {\n\n  render() {\n    return (\n        <div className='home-page text-center'>\n          <h2>Welcome to PR Dashboard</h2>\n          <br/>\n          <Button onClick={this.routeToDashboard} color='success'>\n            Get Started\n          </Button>\n        </div>\n    );\n  }\n\n  routeToDashboard = () => {\n    this.props.history.push('/dashboard');\n  }\n}\nexport default withRouter(Homepage);","import * as React from 'react';\nimport './Header.scss';\nimport Navbar from 'reactstrap/lib/Navbar';\nimport NavbarBrand from 'reactstrap/lib/NavbarBrand';\n\nconst Header = () => (\n    <Navbar className='pr-navbar'>\n        <NavbarBrand className='pr-navbar-brand'>\n            <h4 className='pr-header'> Pull Request Dashboard </h4>\n        </NavbarBrand>\n    </Navbar>\n);\nexport default Header;\n","export class AppService {\n\n  public static async fetchPosts() {\n    return await fetch('http://localhost:3001/posts')\n    .then((response) => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => response.json())\n    .catch(error => {\n      throw Error(error.statusText)\n    });\n  }\n\n  public static async fetchUsers(user: string) {\n    return await fetch(`https://api.github.com/search/users?q=${user}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => response.json())\n    .catch(error => {\n      throw Error(error.statusText)\n    });\n  }\n\n  public static async fetchUserRepos(user: string) {\n    return await fetch(`https://api.github.com/users/${user}/repos`)\n    .then((response) => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => response.json())\n    .catch(error => {\n      throw Error(error.statusText)\n    });\n  }\n}","import * as React from 'react';\nimport './AddRepoButton.scss';\nimport {IAddRepoButtonProps} from './index';\n\nclass AddRepoButton extends React.Component<IAddRepoButtonProps, {}> {\n\n  constructor(props: IAddRepoButtonProps) {\n    super(props);\n  }\n\n  render() {\n    return (\n        <div id=\"btn-add-repo\">\n          <div className=\"btn-icon\" onClick={this.props.onClick}>\n            <div className=\"btn-add\">\n              <i className=\"fa fa-plus\"/>\n            </div>\n          </div>\n          <div className=\"btn-desc\">\n            <span className=\"btn-title\">{this.props.title}</span>\n            <div className=\"btn-circle\" />\n            <div className=\"btn-block\" />\n          </div>\n        </div>\n    );\n  }\n}\nexport default AddRepoButton;\n","import * as React from 'react';\nimport {IInputRepoModalProps, IInputRepoModalState} from './index';\nimport Modal from 'reactstrap/lib/Modal';\nimport ModalHeader from 'reactstrap/lib/ModalHeader';\nimport ModalBody from 'reactstrap/lib/ModalBody';\nimport ModalFooter from 'reactstrap/lib/ModalFooter';\nimport Input from 'reactstrap/lib/Input'\nimport InputGroup from 'reactstrap/lib/InputGroup';\nimport InputGroupAddon from 'reactstrap/lib/InputGroupAddon';\nimport Button from 'reactstrap/lib/Button';\n\nimport {AppService} from '../../services/app.service';\n\nimport './InputRepoModal.scss';\n\nexport class InputRepoModal extends React.Component<IInputRepoModalProps, IInputRepoModalState> {\n\n  public state: IInputRepoModalState;\n\n  constructor(props: IInputRepoModalProps) {\n    super(props);\n\n    this.state = {\n      userOptions: [],\n      repoOptions: [],\n      user: '',\n      repo: '',\n      repoList: []\n    }\n  }\n\n  handleUserChange = (event: any) => {\n    this.setState({\n      user: event.target.value\n    });\n    const text = event.target.value;\n    if (text.length > 2) {\n      AppService.fetchUsers(text)\n      .then(data => {\n        let options: any = [];\n        data.items.forEach((x: any) => {\n          let option = (<option key={options.length} value={x.login}/>);\n          options.push(option);\n        });\n        this.setState({\n          userOptions: options\n        });\n      })\n      .catch((error) => console.error('Error in fetching users list', error));\n    }\n  };\n\n  handleRepoChange = (event: any) => {\n    this.setState({\n      repo: event.target.value\n    });\n  };\n\n  handleBlur = () => {\n    AppService.fetchUserRepos(this.state.user)\n    .then(data => {\n      let repos: any = [];\n      data.forEach((x: any) => {\n        let repo = (<option key={repos.length} value={x.name}/>);\n        repos.push(repo);\n      });\n      this.setState({\n        repoOptions: repos\n      });\n    })\n    .catch((error) => console.error(`Error in fetching repositories for the user ${this.state.user}`, error));\n  };\n\n  render() {\n\n    return (\n        <Modal isOpen={this.props.showModal} toggle={this.props.onClick}>\n          <ModalHeader toggle={this.props.onClick}>\n            <label style={{color: \"#17a2b8\"}}>Search...</label>\n          </ModalHeader>\n          <ModalBody>\n            <div className=\"d-flex flex-column justify-content-around input-fields\">\n                  <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">\n                      <Button type=\"button\" color=\"info\" className=\"user\"> User </Button>\n                    </InputGroupAddon>\n                    <Input type=\"text\" placeholder=\"Enter User or Organization name\" list=\"user-suggestions\"\n                           value={this.state.user} onChange={this.handleUserChange}\n                           onBlur={this.handleBlur} required/>\n                    <datalist id=\"user-suggestions\">\n                      {this.state.userOptions}\n                    </datalist>\n                  </InputGroup>\n                  <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">\n                      <Button type=\"button\" color=\"info\"> Repo </Button>\n                    </InputGroupAddon>\n                    <Input placeholder=\"Enter Repository name\" list=\"repo-suggestions\"\n                           value={this.state.repo} onChange={this.handleRepoChange}\n                    disabled={this.state.user === ''}/>\n                    <datalist id=\"repo-suggestions\">\n                      {this.state.repoOptions}\n                    </datalist>\n                  </InputGroup>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button> Cancel </Button>\n            <Button color=\"danger\"> Add </Button>\n          </ModalFooter>\n        </Modal>\n    );\n  }\n}\n","import * as React from 'react';\nimport Header from '../../components/Header/Header';\nimport {AppService} from '../../services/app.service';\nimport AddRepoButton from '../../components/AddRepoButton/AddRepoButton';\nimport {InputRepoModal} from '../../components/InputRepoModal/InputRepoModal';\nimport {IDashboardState} from './index';\n\nexport class Dashboard extends React.Component<{}, IDashboardState> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      showModal: false\n    };\n  }\n\n  toggle = () => {\n    this.setState({\n      showModal: !this.state.showModal\n    });\n  };\n\n  render() {\n    return (\n        <div>\n          <Header />\n          <AddRepoButton title='Add Repo' onClick={this.toggle}/>\n          <InputRepoModal showModal={this.state.showModal} onClick={this.toggle} onHide={this.toggle}/>\n        </div>\n    );\n  }\n\n  componentDidMount() {\n    AppService.fetchPosts()\n    .then(data =>  console.log('data', data))\n    .catch((error) => console.log('Error in fetching data', error));\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport Homepage from './view/Homepage/Homepage';\nimport {Dashboard} from './view/Dashboard/Dashboard';\n\nReactDOM.render(\n    <Router>\n              <div>\n                <Route exact path=\"/\" component={Homepage} />\n                <Route path=\"/dashboard\" component={Dashboard} />\n              </div>\n            </Router>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}